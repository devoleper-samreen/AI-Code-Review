"use client";

import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  Github,
  CheckCircle,
  AlertTriangle,
  Lightbulb,
  ShieldCheck,
  Loader2,
} from "lucide-react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { prAPI } from "@/services/api";

interface Props {
  id: string;
}

export default function PRReviewClient({ id }: Props) {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [prData, setPRData] = useState<any>(null);

  useEffect(() => {
    fetchPRReview();
  }, [id]);

  const fetchPRReview = async () => {
    try {
      setLoading(true);
      const response = await prAPI.getPRReviewById(id);
      setPRData(response.review);
    } catch (error: any) {
      console.error("Failed to fetch PR review:", error);
      if (error.response?.status === 401) {
        router.push("/signup");
      } else if (error.response?.status === 404) {
        router.push("/dashboard");
      }
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 text-white flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
      </div>
    );
  }

  if (!prData) {
    return (
      <div className="min-h-screen bg-gray-900 text-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">PR Review Not Found</h1>
          <Button asChild>
            <Link href="/dashboard">Back to Dashboard</Link>
          </Button>
        </div>
      </div>
    );
  }

  const feedback = prData.feedbacks?.[0]?.aiSuggestions || {};
  const issues = feedback.issues || [];
  const suggestions = feedback.suggestions || [];
  const bestPractices = feedback.bestPractices || [];
  const overallScore = feedback.overallScore || 0;
  const summary = feedback.summary || "Review in progress...";

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Navbar */}
      <nav className="fixed top-0 left-0 right-0 z-50 bg-black/50 backdrop-blur-md border-b border-gray-800">
        <div className="max-w-7xl mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Github className="w-8 h-8 text-blue-500" />
            <span className="text-2xl font-bold">CodeAI Review</span>
          </div>
          <div className="flex items-center gap-4">
            <Link href="/dashboard" className="hover:text-blue-400 transition">
              Dashboard
            </Link>
            <Button variant="outline" size="icon">
              <Github className="h-5 w-5 text-black" />
            </Button>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="max-w-5xl mx-auto px-4 pt-24 pb-12">
        <Link
          href="/dashboard"
          className="text-blue-400 hover:underline mb-4 inline-block"
        >
          &larr; Back to Dashboard
        </Link>

        <header className="mb-8">
          <h1 className="text-4xl font-bold mb-2">PR #{prData.prNumber}</h1>
          <div className="flex items-center gap-4 text-gray-400">
            <span>Repo: {prData.repoName}</span>
            <span
              className={`flex items-center gap-1 ${
                prData.status === "reviewed" ? "text-green-500" : "text-yellow-500"
              }`}
            >
              {prData.status === "reviewed" ? (
                <CheckCircle className="h-5 w-5" />
              ) : (
                <AlertTriangle className="h-5 w-5" />
              )}
              {prData.status}
            </span>
          </div>
        </header>

        {/* Overview Card */}
        <Card className="bg-gray-800 border-gray-700 mb-8">
          <CardHeader>
            <CardTitle className="text-2xl text-white">
              AI Review Overview
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <p className="text-gray-300 mb-4">{summary}</p>
                {overallScore > 0 && (
                  <div className="flex items-center gap-2">
                    <span className="text-xl font-bold text-white">
                      Overall Score:
                    </span>
                    <div className="w-24 h-24 rounded-full bg-gradient-to-r from-red-500 via-yellow-500 to-green-500 flex items-center justify-center text-3xl font-bold">
                      {overallScore}%
                    </div>
                  </div>
                )}
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-gray-700 p-4 rounded-lg text-center">
                  <AlertTriangle className="h-8 w-8 text-red-500 mx-auto mb-2" />
                  <p className="text-2xl font-bold">{issues.length}</p>
                  <p>Issues Found</p>
                </div>
                <div className="bg-gray-700 p-4 rounded-lg text-center">
                  <Lightbulb className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
                  <p className="text-2xl font-bold">{suggestions.length}</p>
                  <p>Suggestions</p>
                </div>
                <div className="bg-gray-700 p-4 rounded-lg text-center">
                  <ShieldCheck className="h-8 w-8 text-green-500 mx-auto mb-2" />
                  <p className="text-2xl font-bold">{bestPractices.length}</p>
                  <p>Best Practices</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Issues Section */}
        {issues.length > 0 && (
          <section className="mb-8">
            <h2 className="text-3xl font-bold mb-4">Identified Issues</h2>
            <Accordion type="single" collapsible className="w-full">
              {issues.map((issue: any, index: number) => (
                <AccordionItem key={index} value={`issue-${index}`}>
                  <AccordionTrigger className="hover:bg-gray-800 p-4 rounded-t-lg">
                    <div className="flex items-center gap-3">
                      <AlertTriangle
                        className={`h-5 w-5 ${
                          issue.severity === "High"
                            ? "text-red-500"
                            : "text-yellow-500"
                        }`}
                      />
                      <span>
                        {issue.type || "Issue"} - {issue.severity || "Medium"} Severity
                      </span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="bg-gray-800 p-4 rounded-b-lg">
                    <p className="mb-4">{issue.description}</p>
                    {issue.codeSnippet && (
                      <pre className="bg-black p-4 rounded-lg overflow-x-auto">
                        <code className="text-red-300">{issue.codeSnippet}</code>
                      </pre>
                    )}
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </section>
        )}

        {/* Suggestions Section */}
        {suggestions.length > 0 && (
          <section className="mb-8">
            <h2 className="text-3xl font-bold mb-4">Improvement Suggestions</h2>
            <Accordion type="single" collapsible className="w-full">
              {suggestions.map((sug: any, index: number) => (
                <AccordionItem key={index} value={`sug-${index}`}>
                  <AccordionTrigger className="hover:bg-gray-800 p-4 rounded-t-lg">
                    <div className="flex items-center gap-3">
                      <Lightbulb className="h-5 w-5 text-yellow-500" />
                      <span>Suggestion {index + 1}</span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="bg-gray-800 p-4 rounded-b-lg">
                    <p className="mb-4">{sug.description}</p>
                    {sug.improvedCode && (
                      <pre className="bg-black p-4 rounded-lg overflow-x-auto">
                        <code className="text-green-300">{sug.improvedCode}</code>
                      </pre>
                    )}
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </section>
        )}

        {/* Best Practices Section */}
        {bestPractices.length > 0 && (
          <section>
            <h2 className="text-3xl font-bold mb-4">
              Recommended Best Practices
            </h2>
            <Card className="bg-gray-800 border-gray-700">
              <CardContent className="p-6">
                <ul className="list-disc pl-6 space-y-2">
                  {bestPractices.map((bp: string, index: number) => (
                    <li key={index} className="text-gray-300">
                      {bp}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </section>
        )}

        {/* No feedback yet */}
        {!prData.feedbacks || prData.feedbacks.length === 0 && (
          <Card className="bg-gray-800 border-gray-700">
            <CardContent className="p-8 text-center text-gray-400">
              <AlertTriangle className="h-12 w-12 mx-auto mb-4 text-yellow-500" />
              <p className="text-xl">Review in progress...</p>
              <p className="mt-2">AI is analyzing this PR. Check back soon!</p>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  );
}
